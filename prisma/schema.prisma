// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Camp {
  id                 Int               @id @default(autoincrement())
  address            Address           @relation(fields: [addressID], references: [id])
  addressID          Int
  name               String
  organiser          String
  notes              String
  neededEquipment    String
  description        String
  imagePath          String
  capacity           Int
  price              Int
  isRegistrationOpen Boolean
  isPublic           Boolean
  startDate          DateTime
  endDate            DateTime
  registration       Registration[]
  instructors        Instructor[]
  CampInstructors    CampInstructors[]
  GalleryPhoto      GalleryPhoto[]
}

model Registration {
  id       Int      @id @default(autoincrement())
  camp     Camp     @relation(fields: [campId], references: [id])
  campId   Int
  child    Children @relation(fields: [childId], references: [id])
  childId  Int
  parent   Parent   @relation(fields: [parentId], references: [id])
  parentId Int
  accepted Boolean
  paid     Boolean
}

model Children {
  id               Int            @id @default(autoincrement())
  address          Address        @relation(fields: [adressId], references: [id])
  adressId         Int
  firstName        String
  lastName         String
  allergies        String
  diet             String
  birthDate        String
  insuranceCompany Int
  registration     Registration[]

  @@unique([firstName, lastName, birthDate])
}

model Address {
  id           Int        @id @default(autoincrement())
  camps        Camp[]
  children     Children[]
  streetNumber String
  city         String
  zipCode      String
  notes        String
}

model Parent {
  id           Int            @id @default(autoincrement())
  registration Registration[]
  firstName    String
  lastName     String
  phoneNumber  String
  email        String

  @@unique([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FeedPost {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  imagePath String?
  createdAt DateTime
}

model Instructor {
  id              Int               @id @default(autoincrement())
  name            String
  email           String
  phoneNumber     String
  Camps           Camp[]
  CampInstructors CampInstructors[]
}

model CampInstructors {
  campId       Int
  instructorId Int
  camp         Camp       @relation(fields: [campId], references: [id])
  instructor   Instructor @relation(fields: [instructorId], references: [id])

  @@id([campId, instructorId])


model GalleryPhoto {
  id     Int    @id @default(autoincrement())
  camp   Camp   @relation(fields: [campId], references: [id])
  campId Int
  src    String
}
